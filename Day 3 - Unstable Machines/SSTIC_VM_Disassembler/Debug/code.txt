0x05571C00 VM_Regs_0 = 0x05572100;
0x05571C05 VM_Regs_0 = 0x00001000 + VM_Regs_0;
0x05571C0A call + 0x05571C10
0x05571C0C JMP + 0x05571CEF;

0x05571CEF VM_Regs_0 = 0x00000003;
0x05571CF4 for (int i=0;i<VM_Regs_0;i++) {
	VM_Regs[i] = LoadBMPConstants(i);
	VM_Counter++
}
0x05571CF5 CMP VM_Regs_1 == 0x00000078
			If True JMP + 0x05571D3B;
0x05571CFA CMP VM_Regs_1 == 0x000000FE
			If True JMP + 0x05571D4B;
0x05571CFF CMP VM_Regs_1 == 0x00000033
			If True JMP + 0x05571D69;
0x05571D04 CMP VM_Regs_1 == 0x00000012
			If True JMP + 0x05571D9B;
0x05571D09 CMP VM_Regs_1 == 0x000000A1
			If True JMP + 0x05571DA6;
0x05571D0E CMP VM_Regs_1 == 0x000000AF
			If True JMP + 0x05571DC7;
0x05571D13 CMP VM_Regs_1 == 0x0000008E
			If True JMP + 0x05571DE9;
0x05571D18 CMP VM_Regs_1 == 0x00000013
			If True JMP + 0x05571E0B;
0x05571D1D CMP VM_Regs_1 == 0x000000BB
			If True JMP + 0x05571E2D;
0x05571D22 CMP VM_Regs_1 == 0x0000007C
			If True JMP + 0x05571ED9;
0x05571D27 CMP VM_Regs_1 == 0x00000032
			If True JMP + 0x05571E77;
0x05571D2C CMP VM_Regs_1 == 0x0000002F
			If True JMP + 0x05571EA7;
0x05571D31 CMP VM_Regs_1 == 0x000000DC
			If True JMP + 0x05571EF8;
0x05571D36 CMP VM_Regs_1 == 0x00000059
			If True JMP + 0x05571E52;
			
0x05571D3B VM_Regs_4 = 0x05572100;
0x05571D40 VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571D45 VM_Regs_4 = VM_Regs_4 + VM_Regs_2;
0x05571D47 Store(VM_Regs_4, VM_Regs_3);
0x05571D49 JMP - 0x05571CEF;

0x05571D4B VM_Regs_4 = 0x05572100;
0x05571D50 VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571D55 VM_Regs_4 = VM_Regs_4 + VM_Regs_2;
0x05571D57 VM_Regs_5 = 0x05572100;
0x05571D5C VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571D61 VM_Regs_5 = VM_Regs_5 + VM_Regs_3;
0x05571D63 VM_Regs_6 = Load(VM_Regs_5);
0x05571D65 Store(VM_Regs_4, VM_Regs_6);
0x05571D67 JMP - 0x05571CEF;

0x05571D69 VM_Regs_4 = 0x05572100;
0x05571D6E VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571D73 VM_Regs_4 = VM_Regs_4 + VM_Regs_2;
0x05571D75 VM_Regs_4 = Load(VM_Regs_4);
0x05571D77 VM_Regs_5 = 0x05572100;
0x05571D7C VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571D81 VM_Regs_5 = 0x00000030 + VM_Regs_5;
0x05571D86 VM_Regs_6 = 0x00000001;
0x05571D8B Store(VM_Regs_5, VM_Regs_6);
0x05571D8D CMP VM_Regs_3 == VM_Regs_4
			IF True JMP + 0x05571D99;
0x05571D92 VM_Regs_6 = 0x00000000;
0x05571D97 Store(VM_Regs_5, VM_Regs_6);
0x05571D99 JMP - 0x05571CEF;

0x05571D9B VM_Regs_4 = VM_Regs_3;
0x05571D9D VM_Regs_4 = VM_Regs_4 << 0x00000008;
0x05571D9F VM_Regs_4 = VM_Regs_4 + VM_Regs_2;
0x05571DA1 VM_Regs_0 = VM_Regs_4;
0x05571DA3 VM_Counter += VM_Regs_0;
0x05571DA4 JMP - 0x05571CEF;

0x05571DA6 VM_Regs_4 = 0x05572100;
0x05571DAB VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571DB0 VM_Regs_4 = 0x00000030 + VM_Regs_4;
0x05571DB5 VM_Regs_5 = Load(VM_Regs_4);
0x05571DB7 CMP VM_Regs_5 == 0x00000000
			If True JMP + 0x05571DC5;
0x05571DBC VM_Regs_4 = VM_Regs_3;
0x05571DBE VM_Regs_4 = VM_Regs_4 << 0x00000008;
0x05571DC0 VM_Regs_4 = VM_Regs_4 + VM_Regs_2;
0x05571DC2 VM_Regs_0 = VM_Regs_4;
0x05571DC4 VM_Counter += VM_Regs_0;
0x05571DC5 JMP - 0x05571CEF;

0x05571DC7 VM_Regs_4 = 0x05572100;
0x05571DCC VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571DD1 VM_Regs_4 = VM_Regs_4 + VM_Regs_3;
0x05571DD3 VM_Regs_4 = Load(VM_Regs_4);
0x05571DD5 VM_Regs_5 = 0x05572100;
0x05571DDA VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571DDF VM_Regs_5 = VM_Regs_5 + VM_Regs_2;
0x05571DE1 VM_Regs_6 = Load(VM_Regs_5);
0x05571DE3 VM_Regs_6 = VM_Regs_6 + VM_Regs_4;
0x05571DE5 Store(VM_Regs_5, VM_Regs_6);
0x05571DE7 JMP - 0x05571CEF;

0x05571DE9 VM_Regs_4 = 0x05572100;
0x05571DEE VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571DF3 VM_Regs_4 = VM_Regs_4 + VM_Regs_3;
0x05571DF5 VM_Regs_4 = Load(VM_Regs_4);
0x05571DF7 VM_Regs_5 = 0x05572100;
0x05571DFC VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571E01 VM_Regs_5 = VM_Regs_5 + VM_Regs_2;
0x05571E03 VM_Regs_6 = Load(VM_Regs_5);
0x05571E05 VM_Regs_6 = VM_Regs_6 - VM_Regs_4;
0x05571E07 Store(VM_Regs_5, VM_Regs_6);
0x05571E09 JMP - 0x05571CEF;

0x05571E0B VM_Regs_4 = 0x05572100;
0x05571E10 VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571E15 VM_Regs_4 = VM_Regs_4 + VM_Regs_3;
0x05571E17 VM_Regs_4 = Load(VM_Regs_4);
0x05571E19 VM_Regs_5 = 0x05572100;
0x05571E1E VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571E23 VM_Regs_5 = VM_Regs_5 + VM_Regs_2;
0x05571E25 VM_Regs_6 = Load(VM_Regs_5);
0x05571E27 VM_Regs_6 = VM_Regs_4 ^ VM_Regs_6;
0x05571E29 Store(VM_Regs_5, VM_Regs_6);
0x05571E2B JMP - 0x05571CEF;

0x05571E2D VM_Regs_4 = 0x05572100;
0x05571E32 VM_Regs_4 = 0x00001044 + VM_Regs_4;
0x05571E37 VM_Regs_2 = Load(VM_Regs_4);
0x05571E39 VM_Regs_2 = VM_Regs_2 << 0x00000002;
0x05571E3B VM_Regs_4 = VM_Regs_4 - 0x00000024;
0x05571E40 VM_Regs_4 = VM_Regs_4 + VM_Regs_2;
0x05571E42 VM_Regs_2 = Load(VM_Regs_4);
0x05571E44 VM_Regs_4 = 0x05572100;
0x05571E49 VM_Regs_4 = 0x00001040 + VM_Regs_4;
0x05571E4E Store(VM_Regs_4, VM_Regs_2);
0x05571E50 JMP - 0x05571CEF;

0x05571E52 VM_Regs_4 = 0x05572100;
0x05571E57 VM_Regs_4 = 0x00001044 + VM_Regs_4;
0x05571E5C VM_Regs_2 = Load(VM_Regs_4);
0x05571E5E VM_Regs_2 = VM_Regs_2 << 0x00000002;
0x05571E60 VM_Regs_4 = VM_Regs_4 - 0x00000024;
0x05571E65 VM_Regs_2 = VM_Regs_2 + VM_Regs_4;
0x05571E67 VM_Regs_4 = 0x05572100;
0x05571E6C VM_Regs_4 = 0x00001048 + VM_Regs_4;
0x05571E71 VM_Regs_3 = Load(VM_Regs_4);
0x05571E73 Store(VM_Regs_2, VM_Regs_3);
0x05571E75 JMP - 0x05571CEF;

0x05571E77 VM_Regs_4 = 0x05572100;
0x05571E7C VM_Regs_4 = 0x00001044 + VM_Regs_4;
0x05571E81 VM_Regs_2 = Load(VM_Regs_4);
0x05571E83 VM_Regs_5 = 0x05572100;
0x05571E88 VM_Regs_5 = 0x00001048 + VM_Regs_5;
0x05571E8D VM_Regs_3 = Load(VM_Regs_5);
0x05571E8F Push(VM_Regs_2);
0x05571E91 Push(VM_Regs_3);
0x05571E93 VM_Regs_0 = (( Load(VM_Regs_7 + 4) ) << 4) ^ (( Load(VM_Regs_7 + 4) ) >> 5);
0x05571E94 VM_Regs_7 = 0x00000008 + VM_Regs_7;
0x05571E99 VM_Regs_5 = 0x05572100;
0x05571E9E VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571EA3 Store(VM_Regs_5, VM_Regs_0);
0x05571EA5 JMP - 0x05571CEF;

0x05571EA7 VM_Regs_2 = 0x05572100;
0x05571EAC VM_Regs_2 = 0x00001044 + VM_Regs_2;
0x05571EB1 VM_Regs_0 = Load(VM_Regs_2);
0x05571EB3 VM_Regs_2 = 0x05572100;
0x05571EB8 VM_Regs_2 = 0x00001048 + VM_Regs_2;
0x05571EBD VM_Regs_1 = Load(VM_Regs_2);
0x05571EBF VM_Regs_2 = 0x05572100;
0x05571EC4 VM_Regs_2 = 0x00001000 + VM_Regs_2;
0x05571EC9 call + 0x05571FEF
0x05571ECB VM_Regs_5 = 0x05572100;
0x05571ED0 VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571ED5 Store(VM_Regs_5, VM_Regs_0);
0x05571ED7 JMP - 0x05571CEF;

0x05571ED9 VM_Regs_0 = 0x05572100;
0x05571EDE VM_Regs_0 = 0x00001000 + VM_Regs_0;
0x05571EE3 call + 0x05571FFA
0x05571EE5 VM_Regs_0 = 0x00000002 + VM_Regs_0;
0x05571EEA VM_Regs_5 = 0x05572100;
0x05571EEF VM_Regs_5 = 0x00001040 + VM_Regs_5;
0x05571EF4 Store(VM_Regs_5, VM_Regs_0);
0x05571EF6 JMP - 0x05571CEF;

0x05571EF8 Leave VM

Function 0x05571C10
0x05571C10 Push(0x5B1C63ED);
0x05571C15 Push(0x7EBB8EB3);
0x05571C1A Push(0xB8AB7606);
0x05571C1F Push(0x8A06FFF9);
0x05571C24 Push(0xF0A21668);
0x05571C29 Push(0x962E5304);
0x05571C2E Push(0x36644553);
0x05571C33 Push(0x040375A0);
0x05571C38 VM_Regs_0 = 0x00000008;
0x05571C3D VM_Regs_0 = CalculateChecksum(*Stack, VM_Regs[0] * 4);
0x05571C3E Store(VM_Regs_1, VM_Regs_0);
0x05571C40 Push(0xE9B2165A);
0x05571C45 Push(0x0E3A7F8B);
0x05571C4A Push(0xF4C919FF);
0x05571C4F Push(0xFD067499);
0x05571C54 Push(0x2868793E);
0x05571C59 Push(0xE2A3E528);
0x05571C5E Push(0x7B1E58E8);
0x05571C63 Push(0x1951D388);
0x05571C68 VM_Regs_0 = 0x00000008;
0x05571C6D VM_Regs_0 = CalculateChecksum(*Stack, VM_Regs[0] * 4);
0x05571C6E VM_Regs_1 = 0x00000004 + VM_Regs_1;
0x05571C73 Store(VM_Regs_1, VM_Regs_0);
0x05571C75 Push(0x4B0B009C);
0x05571C7A Push(0x32B16ACE);
0x05571C7F Push(0x4B0B565E);
0x05571C84 Push(0x4B0B57C1);
0x05571C89 Push(0x4B0B57CE);
0x05571C8E Push(0x4B0B5730);
0x05571C93 Push(0xA2E81D8A);
0x05571C98 Push(0x4B0B565E);
0x05571C9D Push(0x4B0B5146);
0x05571CA2 VM_Regs_0 = 0x00000009;
0x05571CA7 VM_Regs_0 = CalculateChecksum(*Stack, VM_Regs[0] * 4);
0x05571CA8 VM_Regs_1 = 0x00000004 + VM_Regs_1;
0x05571CAD Store(VM_Regs_1, VM_Regs_0);
0x05571CAF Push(0x5B01EF00);
0x05571CB4 Push(0x000F4BB1);
0x05571CB9 Push(0x5C80EB85);
0x05571CBE Push(0xB602E003);
0x05571CC3 Push(0x508FA8D5);
0x05571CC8 Push(0xC5FC8137);
0x05571CCD Push(0x43F919C3);
0x05571CD2 Push(0xD8AA82E8);
0x05571CD7 VM_Regs_0 = 0x00000008;
0x05571CDC VM_Regs_0 = CalculateChecksum(*Stack, VM_Regs[0] * 4);
0x05571CDD VM_Regs_1 = 0x00000004 + VM_Regs_1;
0x05571CE2 Store(VM_Regs_1, VM_Regs_0);
0x05571CE4 VM_Regs_7 = 0x00000080 + VM_Regs_7;
0x05571CE9 VM_Regs_7 = 0x00000004 + VM_Regs_7;
0x05571CEE Return;


Function 0x05571FFA 
0x05571FFA VM_Counter += VM_Regs_0;
0x05571FFB VM_Counter += VM_Regs_0;
0x05571FFC VM_Counter += VM_Regs_0;
0x05571FFD VM_Regs_0 = Load(VM_Regs_0);
0x05571FFF Return;

Function 0x05571FEF
VM_Regs_0 = VM_Regs_0 & ~(1 << 3);
VM_Regs_0 = VM_Regs_0 & ~(1 << 4);
VM_Regs_0 = VM_Regs_0 & ~(1 << 5);
VM_Regs_0 = VM_Regs_0 & ~(1 << 6);
VM_Regs_0 = VM_Regs_0 & ~(1 << 7);
VM_Regs_0 = VM_Regs_0 & ~(1 << 8);
VM_Regs_0 = VM_Regs_0 & ~(1 << 9);
VM_Regs_0 = VM_Regs_0 & ~(1 << 10);
VM_Regs_0 = VM_Regs_0 & ~(1 << 11);
VM_Regs_0 = VM_Regs_0 & ~(1 << 12);
VM_Regs_0 = VM_Regs_0 & ~(1 << 13);
VM_Regs_0 = VM_Regs_0 & ~(1 << 14);
VM_Regs_0 = VM_Regs_0 & ~(1 << 15);
VM_Regs_0 = VM_Regs_0 & ~(1 << 16);
VM_Regs_0 = VM_Regs_0 & ~(1 << 17);
VM_Regs_0 = VM_Regs_0 & ~(1 << 18);
VM_Regs_0 = VM_Regs_0 & ~(1 << 19);
VM_Regs_0 = VM_Regs_0 & ~(1 << 20);
VM_Regs_0 = VM_Regs_0 & ~(1 << 21);
VM_Regs_0 = VM_Regs_0 & ~(1 << 22);
VM_Regs_0 = VM_Regs_0 & ~(1 << 23);
VM_Regs_0 = VM_Regs_0 & ~(1 << 24);
VM_Regs_0 = VM_Regs_0 & ~(1 << 25);
VM_Regs_0 = VM_Regs_0 & ~(1 << 26);
VM_Regs_0 = VM_Regs_0 & ~(1 << 27);
VM_Regs_0 = VM_Regs_0 & ~(1 << 28);
VM_Regs_0 = VM_Regs_0 & ~(1 << 29);
VM_Regs_0 = VM_Regs_0 & ~(1 << 30);
VM_Regs_0 = VM_Regs_0 & ~(1 << 31);
0x05571FF1 VM_Regs_0 = VM_Regs_0 << 0x00000001;
0x05571FF3 VM_Regs_0 = VM_Regs_0 + VM_Regs_2;
0x05571FF5 VM_Regs_0 = Load(VM_Regs_0);
0x05571FF7 Return;




